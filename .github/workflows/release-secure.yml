name: Secure Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (patch, minor, major)'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: read

jobs:
  security-audit:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: "1.88.0"

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Security audit
        run: cargo audit

  build:
    needs: security-audit
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
    
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: "1.88.0"
          targets: ${{ matrix.target }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Extract version from Cargo.toml
        id: cargo-version
        run: |
          if command -v cargo > /dev/null 2>&1; then
            VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
          else
            VERSION=$(grep '^version =' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Build project
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create archive (Unix)
        if: runner.os != 'Windows'
        run: |
          cd target/${{ matrix.target }}/release
          tar -czvf semantic-git-cz-${{ matrix.target }}.tar.gz semantic-git-cz
          sha256sum semantic-git-cz-${{ matrix.target }}.tar.gz > semantic-git-cz-${{ matrix.target }}.tar.gz.sha256

      - name: Create archive (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cd target/${{ matrix.target }}/release
          Compress-Archive -Path semantic-git-cz.exe -DestinationPath semantic-git-cz-${{ matrix.target }}.zip
          Get-FileHash semantic-git-cz-${{ matrix.target }}.zip -Algorithm SHA256 | Select-Object -ExpandProperty Hash > semantic-git-cz-${{ matrix.target }}.zip.sha256

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: semantic-git-cz-${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/semantic-git-cz-${{ matrix.target }}.*
          retention-days: 1

  create-release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write  # For signing
    environment: release  # Requires approval
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # For changelog generation

      - name: Extract version
        id: version
        run: |
          VERSION=$(grep '^version =' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      - name: Sign artifacts
        run: |
          for file in artifacts/*/*; do
            if [[ ! "$file" =~ \.sha256$ ]]; then
              cosign sign-blob --yes "$file" --output-signature "${file}.sig"
            fi
          done

      - name: Generate changelog
        run: |
          echo "# Release v${{ env.VERSION }}" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## Changes" >> CHANGELOG.md
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0)..HEAD >> CHANGELOG.md

      - name: Create Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "v${{ env.VERSION }}" \
            --title "Release v${{ env.VERSION }}" \
            --notes-file CHANGELOG.md \
            artifacts/*/*